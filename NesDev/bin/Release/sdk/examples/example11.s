;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_rand8
	.import		_set_vram_update
	.import		_flush_vram_update
	.import		_delay
	.export		_metatiles
	.export		_metaattrs
	.export		_palBackground
	.export		_palSprites
	.export		_level_data
	.export		_prepare_row_update
	.export		_preload_screen
	.export		_get_metatile
	.export		_balls_init
	.export		_balls_update
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"

.segment	"RODATA"

_metatiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
	.byte	$86
	.byte	$87
	.byte	$96
	.byte	$97
_metaattrs:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$AA
	.byte	$FF
_palBackground:
	.byte	$0F
	.byte	$16
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$1C
	.byte	$2C
	.byte	$3C
_palSprites:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
_level_data:
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02

.segment	"BSS"

_update_list:
	.res	47,$00
_ball_x:
	.res	63,$00
_ball_y:
	.res	63,$00
_ball_dx:
	.res	63,$00
_ball_dy:
	.res	63,$00
.segment	"ZEROPAGE"
_col:
	.res	1,$00
_tile:
	.res	1,$00
_attr:
	.res	1,$00
_tile_off:
	.res	1,$00
_updn_off:
	.res	1,$00
_upda_off:
	.res	1,$00
_mask1:
	.res	1,$00
_mask2:
	.res	1,$00
_mask3:
	.res	1,$00
_mask4:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_spr:
	.res	1,$00
_name_adr:
	.res	2,$00
_attr_adr:
	.res	2,$00
_src:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ prepare_row_update (unsigned char, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_row_update: near

.segment	"CODE"

;
; if(name_row<30)//calculate tile and attribute row addresses in a nametable
;
	ldy     #$02
	lda     (sp),y
	cmp     #$1E
	bcs     L0543
;
; name_adr=NAMETABLE_A+(name_row<<5);
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _name_adr
	lda     tmp1
	clc
	adc     #$20
	sta     _name_adr+1
;
; attr_adr=NAMETABLE_A+960+((name_row>>2)<<3);
;
	ldx     #$00
	lda     (sp),y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _attr_adr
	txa
	adc     #$23
;
; else
;
	jmp     L06E1
;
; name_row-=30;
;
L0543:	lda     (sp),y
	sec
	sbc     #$1E
	sta     (sp),y
;
; name_adr=NAMETABLE_C+(name_row<<5);
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _name_adr
	lda     tmp1
	clc
	adc     #$28
	sta     _name_adr+1
;
; attr_adr=NAMETABLE_C+960+((name_row>>2)<<3);
;
	ldx     #$00
	lda     (sp),y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _attr_adr
	txa
	adc     #$2B
L06E1:	sta     _attr_adr+1
;
; update_list[0]=MSB(name_adr)|NT_UPD_HORZ;//set nametable update address
;
	lda     _name_adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(name_adr);
;
	lda     _name_adr
	sta     _update_list+1
;
; update_list[35]=MSB(attr_adr)|NT_UPD_HORZ;//set attribute table update address
;
	lda     _attr_adr+1
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(attr_adr);
;
	lda     _attr_adr
	sta     _update_list+36
;
; updn_off=3;//offset in the update list for nametable data
;
	lda     #$03
	sta     _updn_off
;
; upda_off=3+32+3;//offset for attribute data
;
	lda     #$26
	sta     _upda_off
;
; src=&level_data[level_row<<4];//get offset in the level data
;
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shlax4
	clc
	adc     #<(_level_data)
	sta     _src
	txa
	adc     #>(_level_data)
	sta     _src+1
;
; if(!(name_row&1)) tile_off=0; else tile_off=2;//metatile data offset, 2 for odd row numbers
;
	ldy     #$02
	lda     (sp),y
	and     #$01
	beq     L06DC
	tya
L06DC:	sta     _tile_off
;
; if(!(name_row&2))//select appropriate masks for attribute bytes
;
	lda     (sp),y
	and     #$02
	bne     L057D
;
; mask1=0xfc;
;
	lda     #$FC
	sta     _mask1
;
; mask2=0x03;
;
	lda     #$03
	sta     _mask2
;
; mask3=0xf3;
;
	lda     #$F3
	sta     _mask3
;
; mask4=0x0c;
;
	lda     #$0C
;
; else
;
	jmp     L06DD
;
; mask1=0xcf;
;
L057D:	lda     #$CF
	sta     _mask1
;
; mask2=0x30;
;
	lda     #$30
	sta     _mask2
;
; mask3=0x3f;
;
	lda     #$3F
	sta     _mask3
;
; mask4=0xc0;
;
	lda     #$C0
L06DD:	sta     _mask4
;
; for(col=0;col<8;++col)//as two neighborn attributes are grouped into a byte, the loop handles two metatiles in one iteration
;
	lda     #$00
	sta     _col
L0591:	lda     _col
	cmp     #$08
	jcs     incsp3
;
; tile=*src++;//get first metatile code
;
	lda     _src
	ldx     _src+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L059B
	inx
L059B:	sta     _src
	stx     _src+1
	ldy     #$00
	lda     (regsave),y
	sta     _tile
;
; attr=(update_list[upda_off]&mask1)|(metaattrs[tile]&mask2);//get metatile attribute, remember it
;
	ldy     _upda_off
	lda     _update_list,y
	sta     ptr1
	lda     _mask1
	and     ptr1
	sta     sreg
	ldy     _tile
	lda     _metaattrs,y
	sta     ptr1
	lda     _mask2
	and     ptr1
	ora     sreg
	sta     _attr
;
; tile=(tile<<2)+tile_off;//get metatile offset
;
	ldx     #$00
	lda     _tile
	jsr     aslax2
	clc
	adc     _tile_off
	sta     _tile
;
; update_list[updn_off+0]=metatiles[tile+0];//put top or bottom half of the first metatile into the update buffer
;
	lda     _updn_off
	clc
	adc     #<(_update_list)
	sta     sreg
	lda     #$00
	adc     #>(_update_list)
	sta     sreg+1
	lda     _tile
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_metatiles)
	sta     ptr1+1
	ldy     #<(_metatiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; update_list[updn_off+1]=metatiles[tile+1];
;
	ldx     #$00
	lda     _updn_off
	clc
	adc     #$01
	bcc     L06DE
	inx
	clc
L06DE:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _tile
	clc
	adc     #$01
	bcc     L05B0
	inx
L05B0:	sta     ptr1
	txa
	clc
	adc     #>(_metatiles)
	sta     ptr1+1
	ldy     #<(_metatiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; tile=*src++;//get second metatile code
;
	lda     _src
	ldx     _src+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L05B3
	inx
L05B3:	sta     _src
	stx     _src+1
	lda     (regsave),y
	sta     _tile
;
; update_list[upda_off++]=(attr&mask3)|(metaattrs[tile]&mask4);//get attribute, add the other attribute, put into update buffer
;
	lda     _upda_off
	pha
	clc
	adc     #$01
	sta     _upda_off
	pla
	clc
	adc     #<(_update_list)
	sta     ptr2
	tya
	adc     #>(_update_list)
	sta     ptr2+1
	lda     _mask3
	and     _attr
	sta     sreg
	ldy     _tile
	lda     _metaattrs,y
	sta     ptr1
	lda     _mask4
	and     ptr1
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; tile=(tile<<2)+tile_off;//get metatile offset
;
	ldx     #$00
	lda     _tile
	jsr     aslax2
	clc
	adc     _tile_off
	sta     _tile
;
; update_list[updn_off+2]=metatiles[tile+0];//put top or bottom half of the second metatile into the update buffer
;
	ldx     #$00
	lda     _updn_off
	clc
	adc     #$02
	bcc     L06DF
	inx
	clc
L06DF:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	lda     _tile
	sta     ptr1
	tya
	clc
	adc     #>(_metatiles)
	sta     ptr1+1
	ldy     #<(_metatiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; update_list[updn_off+3]=metatiles[tile+1];
;
	ldx     #$00
	lda     _updn_off
	clc
	adc     #$03
	bcc     L06E0
	inx
	clc
L06E0:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _tile
	clc
	adc     #$01
	bcc     L05C8
	inx
L05C8:	sta     ptr1
	txa
	clc
	adc     #>(_metatiles)
	sta     ptr1+1
	ldy     #<(_metatiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; updn_off+=4;
;
	lda     #$04
	clc
	adc     _updn_off
	sta     _updn_off
;
; for(col=0;col<8;++col)//as two neighborn attributes are grouped into a byte, the loop handles two metatiles in one iteration
;
	inc     _col
	jmp     L0591

.endproc

; ---------------------------------------------------------------
; void __near__ preload_screen (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_preload_screen: near

.segment	"ZEROPAGE"

L05CC:
	.res	1,$00

.segment	"CODE"

;
; for(i=0;i<30;++i)
;
	lda     #$00
	sta     L05CC
L05CD:	lda     L05CC
	cmp     #$1E
	jcs     incsp2
;
; prepare_row_update(29-i,level_y>>4);//prepare a row, bottom to top
;
	jsr     decsp3
	lda     #$1D
	sec
	sbc     L05CC
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax4
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _prepare_row_update
;
; flush_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _flush_vram_update
;
; level_y+=8;
;
	ldx     #$00
	lda     #$08
	jsr     addeq0sp
;
; for(i=0;i<30;++i)
;
	inc     L05CC
	jmp     L05CD

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_metatile (int, unsigned int, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_metatile: near

.segment	"CODE"

;
; level_y=level_y-240+(240-y);//the level is stored upside down, flip the axis
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$F0
	bcs     L05DF
	dex
L05DF:	jsr     pushax
	lda     #$F0
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tossubax
	jsr     tosaddax
	ldy     #$04
	jsr     staxysp
;
; if(level_y<0) level_y+=LEVEL_HEIGHT;//loop the level to avoid reading outside the level data
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	cpx     #$80
	bcc     L05E1
	ldx     #$05
	lda     #$00
	jsr     addeqysp
;
; return level_data[((level_y>>4)<<4)|(x>>4)];//level_y/16 is pixels to row, then *16 is row to offset, then x/16 is pixels to column
;
L05E1:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     asrax4
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax4
	ora     ptr1
	sta     ptr1
	txa
	ora     ptr1+1
	clc
	adc     #>(_level_data)
	sta     ptr1+1
	ldy     #<(_level_data)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ balls_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_balls_init: near

.segment	"CODE"

;
; for(i=0;i<BALLS_MAX;++i)
;
	lda     #$00
	sta     _i
L05ED:	lda     _i
	cmp     #$3F
	bcc     L06E4
;
; }
;
	rts
;
; ball_x[i]=rand8();
;
L06E4:	lda     #<(_ball_x)
	ldx     #>(_ball_x)
	clc
	adc     _i
	bcc     L05F7
	inx
L05F7:	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; ball_y[i]=rand8();
;
	lda     #<(_ball_y)
	ldx     #>(_ball_y)
	clc
	adc     _i
	bcc     L05FB
	inx
L05FB:	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; j=rand8();
;
	jsr     _rand8
	sta     _j
;
; spr=1+(rand8()%3);
;
	jsr     _rand8
	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	clc
	adc     #$01
	sta     _spr
;
; ball_dx[i]=j&1?-spr:spr;
;
	lda     #<(_ball_dx)
	ldx     #>(_ball_dx)
	clc
	adc     _i
	bcc     L0605
	inx
L0605:	sta     ptr1
	stx     ptr1+1
	lda     _j
	and     #$01
	beq     L0607
	ldx     #$00
	lda     _spr
	jsr     negax
	jmp     L06E2
L0607:	lda     _spr
L06E2:	ldy     #$00
	sta     (ptr1),y
;
; spr=1+(rand8()%3);
;
	jsr     _rand8
	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	clc
	adc     #$01
	sta     _spr
;
; ball_dy[i]=j&2?-spr:spr;
;
	lda     #<(_ball_dy)
	ldx     #>(_ball_dy)
	clc
	adc     _i
	bcc     L0611
	inx
L0611:	sta     ptr1
	stx     ptr1+1
	lda     _j
	and     #$02
	beq     L0613
	ldx     #$00
	lda     _spr
	jsr     negax
	jmp     L06E3
L0613:	lda     _spr
L06E3:	ldy     #$00
	sta     (ptr1),y
;
; for(i=0;i<BALLS_MAX;++i)
;
	inc     _i
	jmp     L05ED

.endproc

; ---------------------------------------------------------------
; void __near__ balls_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_balls_update: near

.segment	"CODE"

;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0;i<BALLS_MAX;++i)
;
	sta     _i
L061A:	lda     _i
	cmp     #$3F
	bcc     L06E7
;
; }
;
	rts
;
; spr=oam_spr(ball_x[i],ball_y[i],0x40,i&3,spr);//0x40 is tile number, i&3 is palette
;
L06E7:	jsr     decsp4
	ldy     _i
	lda     _ball_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _ball_y,y
	ldy     #$02
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     _i
	and     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; ball_x[i]+=ball_dx[i];
;
	lda     #<(_ball_x)
	ldx     #>(_ball_x)
	clc
	adc     _i
	bcc     L062F
	inx
L062F:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _i
	lda     _ball_dx,y
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; ball_y[i]+=ball_dy[i];
;
	lda     #<(_ball_y)
	ldx     #>(_ball_y)
	clc
	adc     _i
	bcc     L0635
	inx
L0635:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     ptr1
	ldy     _i
	lda     _ball_dy,y
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; if(ball_x[i]>=(256-8)) ball_dx[i]=-ball_dx[i];
;
	ldy     _i
	lda     _ball_x,y
	cmp     #$F8
	bcc     L0639
	lda     #<(_ball_dx)
	ldx     #>(_ball_dx)
	clc
	adc     _i
	bcc     L0640
	inx
L0640:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _ball_dx,y
	jsr     negax
	ldy     #$00
	sta     (ptr1),y
;
; if(ball_y[i]>=(240-8)) ball_dy[i]=-ball_dy[i];
;
L0639:	ldy     _i
	lda     _ball_y,y
	cmp     #$E8
	bcc     L061C
	lda     #<(_ball_dy)
	ldx     #>(_ball_dy)
	clc
	adc     _i
	bcc     L064B
	inx
L064B:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _ball_dy,y
	jsr     negax
	ldy     #$00
	sta     (ptr1),y
;
; for(i=0;i<BALLS_MAX;++i)
;
L061C:	inc     _i
	jmp     L061A

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"ZEROPAGE"

L0650:
	.res	1,$00
L0651:
	.res	1,$00
L0652:
	.res	1,$00
L0653:
	.res	1,$00
L0654:
	.res	1,$00
L0655:
	.res	2,$00
L0656:
	.res	2,$00

.segment	"CODE"

;
; pal_bg(palBackground);//set background palette from an array
;
	lda     #<(_palBackground)
	ldx     #>(_palBackground)
	jsr     _pal_bg
;
; pal_spr(palSprites);//set palette for sprites
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; update_list[0]=0x20|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	lda     #$60
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;//length of nametable update sequence
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; preload_screen(0);//fill the whole screen with beginning of the level
;
	jsr     push0
	jsr     _preload_screen
;
; level_y=8*30;//30 lines were already preloaded, advance the level offset
;
	ldx     #$00
	lda     #$F0
	sta     L0655
	stx     L0655+1
;
; scroll_y=0;//screen scroll value, it loops in range of 0..479 (240*2-1)
;
	txa
	sta     L0656
	sta     L0656+1
;
; sprite_x=128;
;
	lda     #$80
	sta     L0653
;
; sprite_y=120;
;
	lda     #$78
	sta     L0654
;
; balls_init();
;
	jsr     _balls_init
;
; ppu_on_all();//enable rendering
;
	jsr     _ppu_on_all
;
; delay(60);//delay to show the preloaded part of the level
;
	lda     #$3C
	jsr     _delay
;
; ppu_wait_nmi();
;
L067E:	jsr     _ppu_wait_nmi
;
; *(unsigned char*)0x401e=0;
;
	lda     #$00
	sta     $401E
;
; set_vram_update(NULL);//disable update just in case, not really needed in this example
;
	tax
	jsr     _set_vram_update
;
; if(!(level_y&7))//put new row every 8 pixels
;
	lda     L0655
	and     #$07
	bne     L0686
;
; name_row=(scroll_y>>3)+59;//update row just above the visible part of the screen
;
	lda     L0656
	ldx     L0656+1
	jsr     asrax3
	clc
	adc     #$3B
	sta     L0652
;
; if(name_row>=60) name_row-=60;//keep the row number within the limits
;
	cmp     #$3C
	bcc     L068D
	lda     L0652
	sec
	sbc     #$3C
	sta     L0652
;
; prepare_row_update(name_row,level_y>>4);
;
L068D:	jsr     decsp3
	lda     L0652
	ldy     #$02
	sta     (sp),y
	lda     L0655
	ldx     L0655+1
	jsr     shrax4
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _prepare_row_update
;
; set_vram_update(update_list);//the update is handled at next NMI
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; scroll(0,scroll_y);//scroll value will be applied on the next nmi as well
;
L0686:	jsr     push0
	lda     L0656
	ldx     L0656+1
	jsr     _scroll
;
; ++level_y;
;
	inc     L0655
	bne     L069A
	inc     L0655+1
;
; if(level_y>=LEVEL_HEIGHT) level_y=0;//loop the level
;
L069A:	lda     L0655
	cmp     #$00
	lda     L0655+1
	sbc     #$05
	bcc     L069B
	lda     #$00
	sta     L0655
	sta     L0655+1
;
; --scroll_y;
;
L069B:	lda     L0656
	sec
	sbc     #$01
	sta     L0656
	bcs     L06A2
	dec     L0656+1
;
; if(scroll_y<0) scroll_y=240*2-1;//keep Y within the total height of two nametables
;
L06A2:	ldx     L0656+1
	cpx     #$80
	bcc     L06A3
	ldx     #$01
	lda     #$DF
	sta     L0656
	stx     L0656+1
;
; tile=get_metatile(level_y,sprite_x,sprite_y);//get metatile number from the level
;
L06A3:	jsr     decsp6
	lda     L0655
	ldy     #$04
	sta     (sp),y
	iny
	lda     L0655+1
	sta     (sp),y
	lda     L0653
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     L0654
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _get_metatile
	sta     L0651
;
; if(!tile) tile=0x1f; else tile+=0x20;//? for tile 0, ABCD for tiles 1,2,3,4
;
	lda     L0651
	bne     L06AC
	lda     #$1F
	jmp     L06E8
L06AC:	lda     #$20
	clc
	adc     L0651
L06E8:	sta     L0651
;
; oam_spr(sprite_x-4,sprite_y-4,tile,0,63*4);//display sprite
;
	jsr     decsp4
	lda     L0653
	sec
	sbc     #$04
	ldy     #$03
	sta     (sp),y
	lda     L0654
	sec
	sbc     #$04
	dey
	sta     (sp),y
	lda     L0651
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$FC
	jsr     _oam_spr
;
; pad=pad_poll(0);//move the sprite around
;
	lda     #$00
	jsr     _pad_poll
	sta     L0650
;
; if(pad&PAD_LEFT)  if(sprite_x>4)   sprite_x-=2;
;
	and     #$40
	beq     L06C0
	lda     L0653
	cmp     #$05
	bcc     L06C0
	lda     L0653
	sec
	sbc     #$02
	sta     L0653
;
; if(pad&PAD_RIGHT) if(sprite_x<252) sprite_x+=2;
;
L06C0:	lda     L0650
	and     #$80
	beq     L06C6
	lda     L0653
	cmp     #$FC
	bcs     L06C6
	lda     #$02
	clc
	adc     L0653
	sta     L0653
;
; if(pad&PAD_UP)    if(sprite_y>4)   sprite_y-=2;
;
L06C6:	lda     L0650
	and     #$10
	beq     L06CC
	lda     L0654
	cmp     #$05
	bcc     L06CC
	lda     L0654
	sec
	sbc     #$02
	sta     L0654
;
; if(pad&PAD_DOWN)  if(sprite_y<236) sprite_y+=2;
;
L06CC:	lda     L0650
	and     #$20
	beq     L06D2
	lda     L0654
	cmp     #$EC
	bcs     L06D2
	lda     #$02
	clc
	adc     L0654
	sta     L0654
;
; balls_update();
;
L06D2:	jsr     _balls_update
;
; *(unsigned char*)0x401f=0;
;
	lda     #$00
	sta     $401F
;
; }
;
	jmp     L067E

.endproc

