;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_spr_bright
	.import		_pal_bg_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_spr
	.import		_pad_trigger
	.import		_rand8
	.import		_vram_adr
	.import		_vram_unrle
	.export		_test_nam
	.export		_palBG
	.export		_palSpr
	.export		_main

.segment	"RODATA"

_test_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A3
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$DE
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$01
	.byte	$07
	.byte	$A5
	.byte	$01
	.byte	$07
	.byte	$AA
	.byte	$01
	.byte	$0F
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_palBG:
	.byte	$0F
	.byte	$21
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$14
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$29
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palSpr:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"BSS"

L015A:
	.res	1,$00
L015B:
	.res	1,$00
L015C:
	.res	1,$00

.segment	"CODE"

;
; pal_bg(palBG);//set background palette
;
	lda     #<(_palBG)
	ldx     #>(_palBG)
	jsr     _pal_bg
;
; pal_spr(palSpr);//set sprite palette
;
	lda     #<(_palSpr)
	ldx     #>(_palSpr)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);//unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(test_nam);
;
	lda     #<(_test_nam)
	ldx     #>(_test_nam)
	jsr     _vram_unrle
;
; for(i=0;i<64;++i)//display random sprites
;
	lda     #$00
	sta     L015A
L0165:	lda     L015A
	cmp     #$40
	bcs     L0166
;
; oam_spr(rand8(),rand8(),0x40,rand8()&3,i<<2);
;
	jsr     decsp4
	jsr     _rand8
	ldy     #$03
	sta     (sp),y
	jsr     _rand8
	ldy     #$02
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	jsr     _rand8
	and     #$03
	ldy     #$00
	sta     (sp),y
	lda     L015A
	asl     a
	asl     a
	jsr     _oam_spr
;
; for(i=0;i<64;++i)//display random sprites
;
	inc     L015A
	jmp     L0165
;
; ppu_on_all();//enable rendering
;
L0166:	jsr     _ppu_on_all
;
; bg_bright=4;//normal bright
;
	lda     #$04
	sta     L015B
;
; spr_bright=4;
;
	sta     L015C
;
; pal_bg_bright(bg_bright);
;
L0178:	lda     L015B
	jsr     _pal_bg_bright
;
; pal_spr_bright(spr_bright);
;
	lda     L015C
	jsr     _pal_spr_bright
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; i=pad_trigger(0);
;
	lda     #$00
	jsr     _pad_trigger
	sta     L015A
;
; if(i&PAD_UP)    if(bg_bright<8) ++bg_bright;
;
	and     #$10
	beq     L0185
	lda     L015B
	cmp     #$08
	bcs     L0185
	inc     L015B
;
; if(i&PAD_DOWN)  if(bg_bright>0) --bg_bright;
;
L0185:	lda     L015A
	and     #$20
	beq     L018A
	lda     L015B
	beq     L018A
	dec     L015B
;
; if(i&PAD_RIGHT) if(spr_bright<8) ++spr_bright;
;
L018A:	lda     L015A
	and     #$80
	beq     L018F
	lda     L015C
	cmp     #$08
	bcs     L018F
	inc     L015C
;
; if(i&PAD_LEFT)  if(spr_bright>0) --spr_bright;
;
L018F:	lda     L015A
	and     #$40
	beq     L0178
	lda     L015C
	beq     L0178
	dec     L015C
;
; }
;
	jmp     L0178

.endproc

