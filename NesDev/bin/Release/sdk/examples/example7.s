;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_oam_spr
	.import		_scroll
	.import		_split
	.import		_vram_adr
	.import		_vram_unrle
	.export		_bgsplit_nam
	.export		_palette
	.export		_main

.segment	"RODATA"

_bgsplit_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A3
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$68
	.byte	$42
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$62
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$DB
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$AA
	.byte	$01
	.byte	$17
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_palette:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$11
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$3A
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"BSS"

L0120:
	.res	1,$00
L0121:
	.res	1,$00

.segment	"CODE"

;
; pal_bg(palette);//set background palette from an array
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette);//set the same palette for sprites
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);//unpack nametable into VRAM
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(bgsplit_nam);
;
	lda     #<(_bgsplit_nam)
	ldx     #>(_bgsplit_nam)
	jsr     _vram_unrle
;
; oam_spr(0,111,0x42,0,0);//put sprite at the screen split point
;
	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$42
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; ppu_on_all();//enable rendering
;
	jsr     _ppu_on_all
;
; top_x=0;
;
	lda     #$00
	sta     L0120
;
; bottom_x=0;
;
	sta     L0121
;
; scroll(top_x,0);//set normal scroll, it'll be applied at beginning of a TV frame
;
L0135:	lda     L0120
	jsr     pusha0
	lda     #$00
	jsr     _scroll
;
; ppu_wait_nmi();//not ppu_wait_frame, because every 6th frame would not have the split
;
	jsr     _ppu_wait_nmi
;
; split(bottom_x,0);//set scroll below the screen split point
;
	lda     L0121
	jsr     pusha0
	lda     #$00
	jsr     _split
;
; ++top_x;
;
	inc     L0120
;
; --bottom_x;
;
	dec     L0121
;
; }
;
	jmp     L0135

.endproc

